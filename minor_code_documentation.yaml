MinorCodeModificationDocumentation:
  description: >
    This document summarizes the minor modifications for the Langtry-Menter SST
    transitional turbulence model in ADflow, detailing the affected modules and
    key subroutines with code excerpts. The major model implementation is documented
    discursively elsewhere.

  modifications:
    - module: TurbAPI
      subroutine: turbSolveDDADI
      description: Handling for langtryMenterSST added
      excerpt: |
        select case (turbModel)
        ...
          case (komegaWilcox, komegaModified, menterSST, langtryMenterSST, ktau)
            call unsteadyTurbSpectral(itu1, itu2)  ! Compute unsteady turbulence spectral terms

          case (menterSST, langtryMenterSST)
            call SST_block_residuals(.false.)     ! Disable SST residual blocks for initial solve
            call SSTSolve                          ! Call SST solver for turbulence variables
        end select

    - module: TurbAPI
      subroutine: turbResidual
      description: Included langtryMenterSST case
      excerpt: |
        select case (turbModel)
        ...
          case (menterSST, langtryMenterSST)
            call SST_block_residuals(.True.)  ! Enable SST residual blocks to compute turbulence residuals
        end select

    - module: turbUtils
      subroutine: computeEddyViscosity
      description: Added langtryMenterSST to call SST eddy viscosity calculation
      excerpt: |
        select case (turbModel)
        ...
          case (menterSST, langtryMenterSST)
            call SSTEddyViscosity(iBeg, iEnd, jBeg, jEnd, kBeg, kEnd) ! Compute eddy viscosity for SST
          ! other cases...
        end select

    - module: BCData
      subroutine: setBCVarNamesTurb
      description: Added BC variable names for transition variables
      excerpt: |
        select case (turbModel)
        ...
          case (langtryMenterSST)
            bcVarNames(offset + 1) = cgnsTurbK            ! Turbulent kinetic energy
            bcVarNames(offset + 2) = cgnsTurbOmega        ! Specific dissipation rate
            bcVarNames(offset + 3) = cgnsTransitionGamma  ! Transition onset parameter
            bcVarNames(offset + 4) = cgnsTransitionReThetat ! Transition Reynolds number parameter
        end select

    - module: BCData
      function: setBCVarTurb
      description: Freestream initialization for transition variables
      excerpt: |
        select case (turbModel)
        ...
          case (langtryMenterSST)
            ref(itu1) = pRef / rhoRef      ! Initialize turbulent kinetic energy reference
            ref(itu2) = ref(itu1) / nuRef  ! Initialize omega reference from k and viscosity
            ref(iTransition1) = 0          
            ref(iTransition2) = 0        
        end select

    - module: masterRoutines
      description: Main residual loop for RANS equations includes Langtry-Menter SST turbulence residuals
      excerpt: |
        if (equations == RANSEquations) then
        ...
          select case (turbModel)
            case (menterSST, langtryMenterSST)
              call SST_block_residuals(.True.)  ! Include SST residuals for turbulence model solve
          end select
        end if

    - module: outputMod
      subroutine: volSolNames
      description: Added volume solution variable names for Langtry-Menter SST model
      excerpt: |
        case (langtryMenterSST)
        ...
          solNames(itu1) = cgnsTurbK                ! Name for turbulent kinetic energy solution variable
          solNames(itu2) = cgnsTurbOmega            ! Name for omega solution variable
          solNames(iTransition1) = cgnsTransitionGamma    ! Name for transition gamma solution variable
          solNames(iTransition2) = cgnsTransitionReThetat ! Name for transition ReTheta solution variable

        ...

        if (volWriteResTurb) then

                    select case (turbModel)
                    ...
                    case (langtryMenterSST)
                        nn = nn + 1
                        solNames(nn) = cgnsResK

                        nn = nn + 1
                        solNames(nn) = cgnsResOmega

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionGamma

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionReThetat

    - module: outputMod
      subroutine: isoSurfNames
      description: Added iso-surface solution variable names for Langtry-Menter SST model
      excerpt: |
        ...
        if (isoWriteTurb) then

                    select case (turbModel)
                    ...
                    case (langtryMenterSST)
                        nn = nn + 1
                        solNames(nn) = cgnsResK

                        nn = nn + 1
                        solNames(nn) = cgnsResOmega

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionGamma

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionReThetat

         ...
         
         if (isoWriteResTurb) then

                    select case (turbModel)          
                    ...
                    case (langtryMenterSST)
                        nn = nn + 1
                        solNames(nn) = cgnsResK

                        nn = nn + 1
                        solNames(nn) = cgnsResOmega

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionGamma

                        nn = nn + 1
                        solNames(nn) = cgnsTransitionReThetat

    - module: outputMod
      subroutine: writeCGNSHeader
      description: Added support for Langtry-Menter SST in CGNS metadata output
      excerpt: |
        turbulentTest: if (equations == RANSEquations) then
          ...
          case (menterSST, langtryMenterSST)
            call writeCGNSMenterSSTInfo(cgnsInd, base)

    - module: blockette
      subroutine: blockResCore
      description: Enabled residual block computation for Langtry-Menter SST in RANS mode
      excerpt: |
        if (equations == RANSEquations .and. turbRes) then
          ...
          case (menterSST, langtryMenterSST)
            call SST_block_residuals(.True.)

    - module: initializeFlow
      subroutine: referenceState
      description: Freestream turbulent variables initialization
      excerpt: |
        select case (turbModel)
        ....
          case (komegaWilcox, komegaModified, menterSST, langtryMenterSST)
            wInf(itu1) = 1.5_realType * uInf2 * turbIntensityInf**2  ! Calculate freestream turbulent kinetic energy
            wInf(itu2) = wInf(itu1) / (eddyVisInfRatio * nuInf)      ! Calculate freestream omega from k
        end select

    - module: inputParamRoutines
      subroutine: checkMonitor
      description: Added monitors for new turbulence variables
      excerpt: |
        ...
        case (langtryMenterSST)
          nMon = nMon + 4; nMonSum = nMonSum + 4
          monNames(nMon - 3) = cgnsL2ResK        ! Monitor residual of k
          monNames(nMon - 2) = cgnsL2ResOmega    ! Monitor residual of omega
          monNames(nMon - 1) = cgnsL2ResGamma    ! Monitor residual of transition gamma
          monNames(nMon)     = cgnsL2ResRethetat ! Monitor residual of transition ReTheta

    - module: inputParamRoutines
      subroutine: setEquationParameters
      excerpt: |
        ...
        case (langtryMenterSST)
          nw = 9                ! Number of variables including transition scalars
          nt2 = 9               ! Total turbulence variable count
          iTransition1 = 8      ! Index for transition gamma variable
          iTransition2 = 9      ! Index for transition ReTheta variable
          kPresent = .true.     ! Turbulence kinetic energy present
          eddyModel = .true.    ! Eddy viscosity model active
          transitionModel = GammaRetheta  ! Use Gamma-ReTheta transition model

    - module: variableReading
      subroutine: readTurbvar
      description: Added langtryMenterSST to support reading turbulence variables using readTurbKwType
      excerpt: |
        ...
        case (menterSST, langtryMenterSST) ! this is a hack and should be implemented properly
          call readTurbKwType(nTypeMismatch)

    - module: inputPhysics
      variable: transitionModel
      description: Added transitionModel to support transition model
      excerpt: |
        ! transitionModel      Which transition Model to use
        ....
        integer(kind=intType) :: turbModel, cpModel, turbProd, transitionModel

    - module: constants
      variable: gammaretheta
      description: Added gammaretheta as a transition model
      excerpt: |
        integer(kind=intType), parameter :: &
            noTransitionModel = 0, & 
            gammaretheta = 1

    - interface: C
      file: libadflowmodule.c
      description: Added langtrymentersst constant for C interface
      excerpt: |
        ...
        {"langtrymentersst",0,{{-1}},NPY_INT},
        ...
        static void f2py_setup_constants(char *maxstringlen,..... *langtrymentersst,char *v2f,char .....
        ...
        f2py_constants_def[i_f2py++].data = langtrymentersst;
        ...
        "Fortran 90/95 modules:\n""  constants --- maxstringlen,maxcgnsnamelen,..,langtrymentersst,....."

    - interface: Python
      file: pyADflow.py
      description: Added Langtry-Menter SST turbulence model to Python interface turbulence models dictionary
      excerpt: |
        "turbulencemodel": {
            ...
            "sa": self.adflow.constants.spalartallmaras,        # Spalart-Allmaras model
            "menter sst": self.adflow.constants.mentersst,      # Menter SST model
            "langtry menter sst": self.adflow.constants.langtrymentersst,  # Langtry-Menter SST model
            ...
        },
        "eddyVisInfRatio": [float, 0.009],     # Default freestream eddy viscosity ratio, but can be changed in run script 
        "turbIntensityInf": [float, 0.001],    # Default freestream turbulence intensity, but can be changed in run script 